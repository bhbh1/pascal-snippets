#UltiSnip snippets based on ck-schmidi/pascal-snippets
snippet p "program" b
PROGRAM `!v expand("%:r")`;
${1}
BEGIN
${0:${VISUAL}}
END.
endsnippet

snippet if "if" b
IF (${1:condition}) THEN BEGIN
	${0:${VISUAL}}
END; (* IF *)
endsnippet

snippet elsif "elsif"
END ELSE IF ${1:condition} BEGIN
	${0:${VISUAL}}
endsnippet

snippet else "else"
END ELSE BEGIN
	${0:${VISUAL}}
endsnippet

snippet while "while" b
WHILE (${1:condition}) DO BEGIN
	${0:${VISUAL}}
END; (* WHILE *)
endsnippet

snippet repeat "repeat" b
REPEAT
	${0:${VISUAL}}
UNTIL (${1:condition});
endsnippet

snippet for "for" b
FOR ${1:var} := ${2:start} TO ${3:end} DO BEGIN
	${0:${VISUAL}}
END; (* FOR *)
endsnippet

snippet proc "procedure" b
PROCEDURE ${1:name}(${2:params});
	BEGIN
	  ${3}
	END (* $1 *);
endsnippet

snippet procd "procedure-declaration (for units)" b
PROCEDURE ${1:name}(${2:params});
=======
PROCEDURE ${1:name}(${2:params});${3}
BEGIN (* $1 *);
	${0:${VISUAL}}
END (* $1 *);
endsnippet

snippet procd "procedure-declaration (for units)" b
PROCEDURE ${1:name}(${2:params});${0:${VISUAL}}
>>>>>>> 70ea978... Last tabstops now use ${0} and ${VISUAL}
endsnippet

snippet fun "function" b
FUNCTION ${1:name}(${2:params}) : ${3:returnType};
BEGIN (* $1 *);
	${0:${VISUAL}}
END (* $1 *);
endsnippet

snippet fund "function-declaration (for units)" b
FUNCTION ${1:name}(${2:params}) : ${0:$:returnType};
endsnippet

snippet ws "write string" b
Write('${0}');
endsnippet

snippet wl "write line" b
WriteLn(${0});
endsnippet

snippet wls "write line string" b
WriteLn('${0}');
endsnippet

snippet record "record" b
${1} = RECORD
	${0:${VISUAL}}
	END; (* RECORD *)
endsnippet

snippet unit "unit" b
UNIT ${1:name};
	INTERFACE
	${0:${VISUAL}}
	IMPLEMENTATION
	BEGIN (* $1 *)
	END. (* $1 *)
endsnippet

snippet arr "array"
ARRAY [${1}] OF ${0:${VISUAL}:dataType};
endsnippet

snippet c "comment"
(* ${0:${VISUAL}} *)
endsnippet

snippet type "type" 
	TYPE ${1} = (${0:${VISUAL}:(*list of types, e.g. red, blue, green*)});
endsnippet

snippet var "var"
	VAR ${0:${VISUAL}}
endsnippet 
