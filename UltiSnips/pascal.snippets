#UltiSnip snippets based on ck-schmidi/pascal-snippets
snippet p "program" b
PROGRAM `!v expand("%:r")`;
${1}
BEGIN
${0}
END.
endsnippet

snippet if "if" b
IF (${1:condition}) THEN BEGIN
	  ${2}		 
	END; (* IF *)
endsnippet

snippet elsif "elsif"
	END ELSE IF ${1:condition} BEGIN
	  ${2}
endsnippet

snippet else "else"
END ELSE BEGIN
	  ${1}
endsnippet

snippet while "while" b
WHILE (${1:condition}) DO BEGIN
	  ${2}	
	END; (* WHILE *)
endsnippet

snippet repeat "repeat" b
REPEAT
	  ${2}
	UNTIL (${1:condition});
endsnippet

snippet for "for" b
FOR ${1:var} := ${2:start} TO ${3:end} DO BEGIN
	  ${4}	
	END; (* FOR *)
endsnippet

snippet proc "procedure" b
PROCEDURE ${1:name}(${2:params});
	BEGIN
	  ${3}
	END (* $1 *);
endsnippet

snippet procd "procedure-declaration (for units)" b
PROCEDURE ${1:name}(${2:params});
endsnippet

snippet fun "function" b
FUNCTION ${1:name}(${2:params}) : ${3:returnType};
	BEGIN
	  ${4}
	END (* $1 *);
endsnippet

snippet fund "function-declaration (for units)" b
FUNCTION ${1:name}(${2:params}) : ${3:returnType};
endsnippet

snippet ws "write string" b
Write('${1}');${2}
endsnippet

snippet wl "write line" b
WriteLn(${1});${2}
endsnippet

snippet wls "write line string" b
WriteLn('${1}');${2}
endsnippet

snippet record "record" b
${1} = RECORD
	  ${2}
	END; (* RECORD *)
endsnippet

snippet unit "unit" b
UNIT ${1:name};
	INTERFACE
	  ${2}
	IMPLEMENTATION
	BEGIN (* $1 *)
	END. (* $1 *)
endsnippet

snippet arr "array"
ARRAY [${1}] OF ${2:dataType};
endsnippet

snippet c "comment"
(* ${1} *)
endsnippet

snippet type "type" 
	TYPE ${1} = (${2:(*list of types, e.g. red, blue, green*)});
endsnippet

snippet var "var"
	VAR ${1}
endsnippet 
